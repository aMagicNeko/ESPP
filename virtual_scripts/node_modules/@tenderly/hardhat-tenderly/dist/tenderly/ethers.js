"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapUpgrades = exports.wrapEthers = void 0;
const logger_1 = require("../utils/logger");
const ContractFactory_1 = require("./ethers/ContractFactory");
const Contract_1 = require("./ethers/Contract");
const ProxyContract_1 = require("./ethers/ProxyContract");
function wrapEthers(nativeEthers, tenderly) {
    // Factory
    nativeEthers.getContractFactoryFromArtifact =
        wrapGetContractFactoryFromArtifact(nativeEthers.getContractFactoryFromArtifact, tenderly);
    nativeEthers.getContractFactory = wrapGetContractFactory(nativeEthers.getContractFactory, tenderly);
    // Ethers's deployContract
    nativeEthers.deployContract = wrapDeployContract(nativeEthers.deployContract, tenderly);
    // Contract
    nativeEthers.getContractAtFromArtifact = wrapGetContractAtFromArtifact(nativeEthers.getContractAtFromArtifact, tenderly);
    nativeEthers.getContractAt = wrapGetContractAt(nativeEthers.getContractAt, tenderly);
    return nativeEthers;
}
exports.wrapEthers = wrapEthers;
function wrapUpgrades(hre, nativeUpgrades, tenderly) {
    // Deploy Proxy
    nativeUpgrades.deployProxy = wrapDeployProxy(hre, nativeUpgrades.deployProxy, tenderly);
    // Deploy BeaconProxy
    nativeUpgrades.deployBeaconProxy = wrapDeployBeaconProxy(hre, nativeUpgrades.deployBeaconProxy, tenderly);
    return nativeUpgrades;
}
exports.wrapUpgrades = wrapUpgrades;
function wrapDeployProxy(hre, func, tenderly) {
    return async function (implFactory, argsOrOpts, opts) {
        logger_1.logger.debug("Calling ethers.Contract.deployProxy");
        let proxyContract;
        if (opts !== undefined && opts !== null) {
            proxyContract = await func(implFactory, argsOrOpts, opts);
        }
        else {
            proxyContract = await func(implFactory, argsOrOpts);
        }
        logger_1.logger.debug("Returning TdlyProxyContract instance");
        return new ProxyContract_1.TdlyProxyContract(hre, tenderly, proxyContract);
    };
}
function wrapDeployBeaconProxy(hre, func, tenderly) {
    return async function (beacon, implFactory, argsOrOpts, opts) {
        if (isTdlyContractFactory(implFactory)) {
            implFactory = implFactory.getNativeContractFactory();
        }
        let proxyContract;
        if (opts !== undefined && opts !== null) {
            proxyContract = await func(beacon, implFactory, argsOrOpts, opts);
        }
        else {
            proxyContract = await func(beacon, implFactory, argsOrOpts);
        }
        return new ProxyContract_1.TdlyProxyContract(hre, tenderly, proxyContract);
    };
}
function isTdlyContractFactory(factory) {
    return (factory.getNativeContractFactory !== undefined);
}
function wrapGetContractFactory(func, tenderly) {
    return async function (nameOrAbi, bytecodeOrFactoryOptions, signer) {
        if (typeof nameOrAbi === "string") {
            const contractFactory = await func(nameOrAbi, bytecodeOrFactoryOptions);
            let libs;
            const factoryOpts = bytecodeOrFactoryOptions;
            if (factoryOpts !== undefined && "libraries" in factoryOpts) {
                libs = factoryOpts.libraries;
            }
            return wrapContractFactory(contractFactory, tenderly, nameOrAbi, libs);
        }
        return func(nameOrAbi, bytecodeOrFactoryOptions, signer);
    };
}
function wrapDeployContract(func, tenderly) {
    return async function (name, signerOrOptions) {
        const contract = await func(name, signerOrOptions);
        let libraries;
        if (signerOrOptions !== undefined && "libraries" in signerOrOptions) {
            libraries = signerOrOptions.libraries;
        }
        return new Contract_1.TdlyContract(contract, tenderly, name, libraries);
    };
}
function wrapGetContractAt(func, tenderly) {
    return async function (nameOrAbi, address, signer) {
        if (typeof nameOrAbi === "string") {
            const contract = await func(nameOrAbi, address, signer);
            await tryToVerify(tenderly, nameOrAbi, contract);
            return contract;
        }
        return func(nameOrAbi, address, signer);
    };
}
function wrapGetContractFactoryFromArtifact(func, tenderly) {
    return async function (artifact, signerOrOptions) {
        const contractFactory = await func(artifact, signerOrOptions);
        let libs;
        const factoryOpts = signerOrOptions;
        if (factoryOpts !== undefined && "libraries" in factoryOpts) {
            libs = factoryOpts.libraries;
        }
        return wrapContractFactory(contractFactory, tenderly, artifact.contractName, libs);
    };
}
function wrapGetContractAtFromArtifact(func, tenderly) {
    return async function (artifact, address, signer) {
        const contract = await func(artifact, address, signer);
        await tryToVerify(tenderly, artifact.contractName, contract);
        return contract;
    };
}
function wrapContractFactory(contractFactory, tenderly, name, libraries) {
    contractFactory = new ContractFactory_1.TdlyContractFactory(contractFactory, tenderly, name, libraries);
    return contractFactory;
}
async function tryToVerify(tenderly, name, contract) {
    await tenderly.verify({
        name,
        address: await contract.getAddress(),
    });
}
//# sourceMappingURL=ethers.js.map