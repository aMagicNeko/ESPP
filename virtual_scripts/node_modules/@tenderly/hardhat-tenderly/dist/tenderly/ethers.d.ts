import { Contract, ContractFactory, ethers } from "ethers";
import { Artifact, HardhatRuntimeEnvironment } from "hardhat/types";
import { FactoryOptions, HardhatEthersHelpers, DeployContractOptions } from "@nomicfoundation/hardhat-ethers/types";
import { upgrades } from "hardhat";
import { ContractAddressOrInstance, DeployBeaconProxyOptions, DeployProxyOptions } from "@openzeppelin/hardhat-upgrades/dist/utils";
import { TenderlyPlugin } from "../type-extensions";
export declare function wrapEthers(nativeEthers: typeof ethers & HardhatEthersHelpers, tenderly: TenderlyPlugin): typeof ethers & HardhatEthersHelpers;
export declare function wrapUpgrades(hre: HardhatRuntimeEnvironment, nativeUpgrades: typeof upgrades & HardhatEthersHelpers, tenderly: TenderlyPlugin): typeof upgrades & HardhatEthersHelpers;
export interface DeployFunction {
    (ImplFactory: ContractFactory, args?: unknown[], opts?: DeployProxyOptions): Promise<Contract>;
    (ImplFactory: ContractFactory, opts?: DeployProxyOptions): Promise<Contract>;
}
export interface DeployBeaconProxyFunction {
    (beacon: ContractAddressOrInstance, attachTo: ContractFactory, args?: unknown[], opts?: DeployBeaconProxyOptions): Promise<Contract>;
    (beacon: ContractAddressOrInstance, attachTo: ContractFactory, opts?: DeployBeaconProxyOptions): Promise<Contract>;
}
export declare function getContractFactoryName(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
export declare function getContractFactoryABI(abi: any[], bytecode: ethers.BytesLike, signer?: ethers.Signer): Promise<ethers.ContractFactory>;
export declare function deployContract(name: string, signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<ethers.Contract>;
export declare function getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
export declare function getContractFactoryFromArtifact(artifact: Artifact, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
export declare function getContractAtFromArtifact(artifact: Artifact, address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
//# sourceMappingURL=ethers.d.ts.map