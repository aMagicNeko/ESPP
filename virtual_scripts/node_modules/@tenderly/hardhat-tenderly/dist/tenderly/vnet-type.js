"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVnetTypeByEndpointId = exports.VnetType = void 0;
const constants_1 = require("tenderly/common/constants");
const services_1 = require("tenderly/internal/core/services");
const logger_1 = require("../utils/logger");
const util_1 = require("../utils/util");
var VnetType;
(function (VnetType) {
    VnetType["NULL_TYPE"] = "null-type";
    VnetType["FORK_V1"] = "fork-v1";
    VnetType["FORK_V2"] = "fork-v2";
    VnetType["DEVNET_V1"] = "devnet-v1";
    VnetType["DEVNET_V2"] = "devnet-v2";
    VnetType["TESTNET"] = "testnet";
    VnetType["PUBLIC_NETWORK"] = "public-network";
})(VnetType || (exports.VnetType = VnetType = {}));
async function getVnetTypeByEndpointId(hre, endpointId) {
    if ((0, util_1.isTenderlyGatewayNetworkConfig)(hre.network.config)) {
        return VnetType.PUBLIC_NETWORK;
    }
    try {
        const axiosInstance = services_1.TenderlyApiService.configureInstance();
        const resp = await axiosInstance.get(`${constants_1.TENDERLY_API_BASE_URL}/api/v1/vnet-type/${endpointId}`);
        return resp.data.vnetType;
    }
    catch (error) {
        logger_1.logger.error(`Failed to get vnet type for endpoint ${endpointId}: ${error}`);
        return VnetType.NULL_TYPE;
    }
}
exports.getVnetTypeByEndpointId = getVnetTypeByEndpointId;
//# sourceMappingURL=vnet-type.js.map