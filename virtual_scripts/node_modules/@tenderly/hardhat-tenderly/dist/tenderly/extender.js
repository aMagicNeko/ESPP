"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
require("@openzeppelin/hardhat-upgrades");
const plugins_1 = require("hardhat/plugins");
const config_1 = require("hardhat/config");
const tenderly_1 = require("tenderly");
const logger_1 = require("tenderly/utils/logger");
const constants_1 = require("tenderly/common/constants");
const config_2 = require("tenderly/utils/config");
const logger_2 = require("../utils/logger");
const Tenderly_1 = require("../Tenderly");
const TenderlyNetwork_1 = require("../TenderlyNetwork");
const constants_2 = require("../constants");
const util_1 = require("../utils/util");
const URLComposer = __importStar(require("../utils/url-composer"));
const ethers_1 = require("./ethers");
const hardhat_deploy_1 = require("./hardhat-deploy");
const vnet_type_1 = require("./vnet-type");
const tenderlyService = new tenderly_1.TenderlyService(constants_2.PLUGIN_NAME);
function setup() {
    // set to loggers to error level by default
    logger_2.logger.settings.minLevel = 4;
    logger_1.logger.settings.minLevel = 4;
    (0, config_1.extendEnvironment)(async (hre) => {
        hre.tenderly = (0, plugins_1.lazyObject)(() => new Tenderly_1.Tenderly(hre));
        if (hre.hardhatArguments.verbose) {
            logger_2.logger.settings.minLevel = 1; // trace level
            logger_1.logger.settings.minLevel = 1; // trace level
        }
        logger_2.logger.info(`Setting up hardhat-tenderly plugin. Log level of hardhat tenderly plugin set to: ${logger_2.logger.settings.minLevel}`);
        // serviceLogger is used here just for initialization, nothing else, it will be used in TenderlyService.ts
        logger_1.logger.info(`Log level of tenderly service set to: ${logger_1.logger.settings.minLevel}`);
        const pjson = require("../../package.json");
        logger_2.logger.info("@tenderly/hardhat-tenderly version:", pjson.version);
        logger_2.logger.info("Tenderly running configuration: ", {
            username: hre.config.tenderly?.username,
            project: hre.config.tenderly?.project,
            automaticVerification: process.env.AUTOMATIC_VERIFICATION_ENABLED,
            privateVerification: hre.config.tenderly?.privateVerification,
            networkName: hre.network.name,
        });
        extendProvider(hre);
        populateNetworks();
        if (process.env.AUTOMATIC_VERIFICATION_ENABLED === "true") {
            logger_2.logger.debug("Automatic verification is enabled, proceeding to extend ethers library.");
            extendEthers(hre);
            extendUpgrades(hre);
            extendHardhatDeploy(hre);
            logger_2.logger.debug("Wrapping ethers library finished.");
        }
        if (shouldPopulateHardhatVerifyConfig(hre)) {
            logger_2.logger.info("Automatic population of hardhat-verify `etherscan` configuration is enabled.");
            // If the config already exists, we should not overwrite it, either remove it or turn off automatic population.
            const etherscanConfig = await findEtherscanConfig(hre);
            if (etherscanConfig !== undefined) {
                throw new Error(`Hardhat-verify's 'etherscan' configuration with network '${hre.network.name}' is already populated. Please remove the following configuration:\n${JSON.stringify(etherscanConfig, null, 2)}\nOr set 'TENDERLY_AUTOMATIC_POPULATE_HARDHAT_VERIFY_CONFIG' environment variable to 'false'`);
            }
            await populateHardhatVerifyConfig(hre);
        }
        logger_2.logger.debug("Setup finished.");
    });
}
exports.setup = setup;
(0, config_1.extendEnvironment)((hre) => {
    hre.tenderly = (0, plugins_1.lazyObject)(() => new Tenderly_1.Tenderly(hre));
    extendProvider(hre);
    populateNetworks();
});
(0, config_1.extendConfig)((resolvedConfig) => {
    resolvedConfig.networks.tenderly = {
        ...resolvedConfig.networks.tenderly,
    };
});
const extendProvider = (hre) => {
    if (!(0, util_1.isTenderlyNetworkConfig)(hre.network.config)) {
        logger_2.logger.info(`Used network is not 'tenderly' so there is no extending of the provider.`);
        return;
    }
    if ("url" in hre.network.config && hre.network.config.url !== undefined) {
        if (hre.network.config.url.includes("devnet")) {
            const devnetID = hre.network.config.url.split("/").pop();
            hre.tenderly.network().setDevnetID(devnetID);
            logger_2.logger.info(`There is a devnet url in the '${hre.network.name}' network`, { devnetID });
            return;
        }
        const forkID = hre.network.config.url.split("/").pop();
        hre.tenderly.network().setFork(forkID);
        logger_2.logger.info(`There is a fork url in the 'tenderly' network`, { forkID });
        return;
    }
    const tenderlyNetwork = new TenderlyNetwork_1.TenderlyNetwork(hre);
    tenderlyNetwork
        .initializeFork()
        .then(async (_) => {
        hre.tenderly.setNetwork(tenderlyNetwork);
        const forkID = await hre.tenderly.network().getForkID();
        hre.network.config.url = `${constants_1.TENDERLY_JSON_RPC_BASE_URL}/fork/${forkID ?? ""}`;
        // hre.ethers.provider = new hre.ethers.BrowserProvider(hre.tenderly.network());
    })
        .catch((_) => {
        logger_2.logger.error(`Error happened while trying to initialize fork ${constants_2.PLUGIN_NAME}. Check your tenderly configuration`);
    });
};
const populateNetworks = () => {
    tenderlyService
        .getNetworks()
        .then((networks) => {
        let network;
        let slug;
        for (network of networks) {
            constants_1.NETWORK_NAME_CHAIN_ID_MAP[network.slug] = network.ethereum_network_id;
            if (network?.metadata?.slug !== undefined) {
                constants_1.NETWORK_NAME_CHAIN_ID_MAP[network.metadata.slug] =
                    network.ethereum_network_id;
            }
            constants_1.CHAIN_ID_NETWORK_NAME_MAP[network.ethereum_network_id] = network.slug;
            for (slug of network.metadata.secondary_slugs) {
                constants_1.NETWORK_NAME_CHAIN_ID_MAP[slug] = network.ethereum_network_id;
            }
        }
        logger_2.logger.silly("Obtained supported public networks: ", constants_1.NETWORK_NAME_CHAIN_ID_MAP);
    })
        .catch((_) => {
        logger_2.logger.error("Error encountered while fetching public networks");
    });
};
const extendEthers = (hre) => {
    if ("ethers" in hre &&
        hre.ethers !== undefined &&
        hre.ethers !== null &&
        "tenderly" in hre &&
        hre.tenderly !== undefined) {
        Object.assign(hre.ethers, (0, ethers_1.wrapEthers)(hre.ethers, hre.tenderly));
    }
};
const extendUpgrades = (hre) => {
    if ("upgrades" in hre &&
        hre.upgrades !== undefined &&
        hre.upgrades !== null &&
        "tenderly" in hre &&
        hre.tenderly !== undefined) {
        logger_2.logger.debug("Extending upgrades library");
        Object.assign(hre.upgrades, (0, ethers_1.wrapUpgrades)(hre, hre.upgrades, hre.tenderly));
    }
};
// Returns true if the user has selected automatic population of hardhat-verify `etherscan` configuration through the TENDERLY_AUTOMATIC_POPULATE_HARDHAT_VERIFY_CONFIG env variable,
// and the network is some of the Tenderly networks.
function shouldPopulateHardhatVerifyConfig(hre) {
    return (
    // Must cover both since AUTOMATIC_POPULATE_HARDHAT_VERIFY_CONFIG is the legacy because we didn't use the TENDERLY_ prefix.
    (process.env.TENDERLY_AUTOMATIC_POPULATE_HARDHAT_VERIFY_CONFIG === "true" ||
        process.env.AUTOMATIC_POPULATE_HARDHAT_VERIFY_CONFIG === "true") &&
        ((0, util_1.isTenderlyNetworkConfig)(hre.network.config) ||
            (0, util_1.isTenderlyGatewayNetworkConfig)(hre.network.config)) &&
        (0, util_1.isHttpNetworkConfig)(hre.network.config));
}
// populateHardhatVerifyConfig will populate `hre.config.etherscan` configuration of the `@nomicfoundation/hardhat-verify` plugin.
// This function should import `@nomicfoundation/hardhat-verify` type declaration expansion of the `HardhatConfig`, but can't since there will be double overloading task error if the client application also uses `@nomicfoundation/hardhat-verify` plugin.
async function populateHardhatVerifyConfig(hre) {
    if ((!(0, util_1.isTenderlyNetworkConfig)(hre.network.config) &&
        !(0, util_1.isTenderlyGatewayNetworkConfig)(hre.network.config)) ||
        !(0, util_1.isHttpNetworkConfig)(hre.network.config)) {
        return;
    }
    const accessKey = (0, config_2.getAccessToken)();
    if (accessKey === "") {
        logger_2.logger.error("Tenderly access key is not set. Please set TENDERLY_ACCESS_KEY environment variable.");
        return;
    }
    if (hre.config.etherscan === undefined ||
        hre.config.etherscan === null) {
        hre.config.etherscan = {
            apiKey: accessKey,
            customChains: [],
        };
    }
    if (isRecord(hre.config.etherscan.apiKey) &&
        hre.config.etherscan.apiKey[hre.network.name] === undefined) {
        hre.config.etherscan.apiKey[hre.network.name] = accessKey;
    }
    else if (typeof hre.config.etherscan.apiKey === "string") {
        hre.config.etherscan.apiKey = accessKey;
    }
    const chainId = await getChainId(hre.network);
    const endpointId = hre.network.config.url.split("/").pop();
    if (endpointId === undefined) {
        throw new Error("Could not locate the UUID at the end of a Tenderly RPC URL.");
    }
    const vnetType = await (0, vnet_type_1.getVnetTypeByEndpointId)(hre, endpointId);
    if (vnetType === vnet_type_1.VnetType.NULL_TYPE) {
        throw new Error("Couldn't recognize VnetType from endpoint id.");
    }
    hre.config.etherscan.customChains.push({
        network: hre.network.name,
        chainId,
        urls: {
            apiURL: URLComposer.composeApiURL(hre, endpointId, chainId, vnetType),
            browserURL: URLComposer.composeBrowserURL(hre, endpointId, chainId, vnetType),
        },
    });
}
function isRecord(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
}
async function getChainId(network) {
    if (network.config.chainId !== undefined && network.config.chainId !== null) {
        return network.config.chainId;
    }
    return Number(await network.provider.send("eth_chainId", []));
}
async function findEtherscanConfig(hre) {
    if (hre.config.etherscan === undefined) {
        return undefined;
    }
    if (hre.config.etherscan.customChains === undefined) {
        return undefined;
    }
    return hre.config.etherscan.customChains.find((chainConfig) => {
        return chainConfig.network === hre.network.name;
    });
}
const extendHardhatDeploy = (hre) => {
    // ts-ignore is needed here because we want to avoid importing hardhat-deploy in order not to cause duplicated initialization of the .deployments field
    if ("deployments" in hre &&
        // @ts-ignore
        hre.deployments !== undefined &&
        "tenderly" in hre &&
        // @ts-ignore
        hre.tenderly !== undefined) {
        // @ts-ignore
        hre.deployments = (0, hardhat_deploy_1.wrapHHDeployments)(hre.deployments, hre.tenderly);
    }
};
//# sourceMappingURL=extender.js.map